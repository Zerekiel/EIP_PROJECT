#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
var https = require('https');
var url = require('url');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port;
port = normalizePort(process.env.PORT_SERVER || '3000');
app.set('port', port);

var hostname;
hostname = process.env.LOCALHOST || '127.0.0.1';
app.set('hostname', hostname);

/**
 * Create HTTPS server.
 */

 // Certificate
 const privateKey = fs.readFileSync('/etc/letsencrypt/live/healthsafe-api.herokuapp.com/privkey.pem', 'utf8');
 const certificate = fs.readFileSync('/etc/letsencrypt/live/healthsafe-api.herokuapp.com/cert.pem', 'utf8');
 const ca = fs.readFileSync('/etc/letsencrypt/live/healthsafe-api.herokuapp.com/chain.pem', 'utf8');

 const credentials = {
 	key: privateKey,
 	cert: certificate,
 	ca: ca
 };

//var server;
const server = http.createServer(app);
const httpsServer = https.createServer(credentials, app);

server.listen(80, () => {
	console.log('HTTP Server running on port 80');
});

//httpsServer.listen(443, () => {
//	console.log('HTTPS Server running on port 443');
//});

httpsServer.on('request', function(req, res) {
    var host;
    var baseUrl;
    var realUrl;

    host = req.headers.host;
    baseUrl = req.url;
    realUrl = (req.connection.encrypted ? 'https': 'http') + '://' + host + baseUrl;

    console.log("URL : " + realUrl);
});


// require('node-api-doc-generator')(app, process.env.LOCALHOST,3000);


/**
 * Listen on provided port, on all network interfaces.
 */
//port
httpsServer.listen((process.env.PORT || 3000), function() {
        console.log('Server is running on port :', port);
});

// I d'ont know what's for
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
