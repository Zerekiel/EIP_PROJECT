apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.2' //Use latest version
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }
}

task jacocoFix(type: Copy) {
    from 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    into '../'
    rename { String fileName ->
        fileName.replace("jacocoTestReport.xml", "jacoco.xml")
    }
    filter { line -> line.replaceAll("com/", "webapp/src/main/java/com/") }
}

android {

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.eipteam.healthsafe"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testHandleProfiling true
        testFunctionalTest true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            testCoverageEnabled true
        }


        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.returnDefaultValues = true
            unitTests {
                includeAndroidResources = true
            }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jacoco:org.jacoco.agent:0.8.3"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    testImplementation 'androidx.test:core:1.0.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'com.google.guava:guava:27.0.1-android'
    testImplementation 'org.mockito:mockito-core:2.8.0'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC2'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.0'
    testImplementation 'org.powermock:powermock-core:1.7.0'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.0'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.5'
    testImplementation "org.powermock:powermock-module-junit4:1.7.0RC2"
    testImplementation 'org.robolectric:robolectric:4.2'
}
