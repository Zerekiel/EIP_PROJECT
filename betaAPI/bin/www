#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('betaapi:server');
const http = require('http');
const https = require('https');
const configServer = require('./config/configServer');

if (process.env.NODE_ENV !== 'production') {
        require('dotenv').config();


        /**
         * Get port from environment and store in Express.
         */
        const port = normalizePort(process.env.PORT_SERVER || '3000');

        /**
         * Create HTTPS server.
         */
        const server = https.createServer(configServer.optionHTTPS, app);

        /**
         * Options Server on requests.
         */
        server.on('request', configServer.displayURL);

        /**
         * Listen on provided port, on all network interfaces.
         */
        server.listen(port, () => {
                console.log(`Server HTTPS is running on port : ${port}`);
        });

        /**
         * Call functions Event listener for HTTPS server "error"/"listening" event.
         */
        server.on('error', onError);
        server.on('listening', onListening);

        /**
         * Event listener for HTTPS server "error" event.
         */
        function onError(error) {
                if (error.syscall !== 'listen') {
                        throw error;
                }

                var bind = typeof port === 'string'
                        ? 'Pipe ' + port
                        : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
                case 'EACCES':
                        console.error(bind + ' requires elevated privileges');
                        process.exit(1);
                        break;
                case 'EADDRINUSE':
                        console.error(bind + ' is already in use');
                        process.exit(1);
                        break;
                default:
                        throw error;
                }
        }

        /**
         * Event listener for HTTPS server "listening" event.
         */
        function onListening() {
                var addr = server.address();
                var bind = typeof addr === 'string'
                        ? 'pipe ' + addr
                        : 'port ' + addr.port;
                debug('Listening on ' + bind);
        }
} else {

        /**
         * Get port from environment and store in Express.
         */
        const portHTTP = normalizePort(process.env.PORT || '5000');
        app.set('portHTTP', portHTTP);

        /**
         * Create HTTP server.
         */
        const serverHTTP = http.createServer(app);

        /**
         * Options Server on requests.
         */
        serverHTTP.on('request', configServer.displayURL);

        /**
         * Listen on provided port, on all network interfaces.
         */
        serverHTTP.listen(portHTTP, () => {
                console.log(`Server HTTP is running on port : ${portHTTP}`);
        });

        /**
         * Call functions Event listener for HTTPS server "error"/"listening" event.
         */
        serverHTTP.on('error', onError);
        serverHTTP.on('listening', onListening);

        /**
         * Event listener for HTTP server "error" event.
         */
        function onError(error) {
                if (error.syscall !== 'listen') {
                        throw error;
                }

                var bind = typeof port === 'string'
                        ? 'Pipe ' + port
                        : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
                case 'EACCES':
                        console.error(bind + ' requires elevated privileges');
                        process.exit(1);
                        break;
                case 'EADDRINUSE':
                        console.error(bind + ' is already in use');
                        process.exit(1);
                        break;
                default:
                        throw error;
                }
        }

        /**
         * Event listener for HTTP server "listening" event.
         */
        function onListening() {
                var addr = serverHTTP.address();
                var bind = typeof addr === 'string'
                        ? 'pipe ' + addr
                        : 'port ' + addr.port;
                debug('Listening on ' + bind);
        }
}


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
